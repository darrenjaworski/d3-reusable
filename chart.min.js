(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["d3re"] = factory();
	else
		root["d3re"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChartDefault; });
var ChartDefault = {
  margin: {
    top: 10,
    right: 30,
    bottom: 30,
    left: 30
  },
  width: 1000 - 30 - 30,
  height: 500 - 10 - 30
};


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bar;
function bar(){
  var data = [];
  var width = 960;
  var height = 500;
  var barPadding = 1;
  var fillColor = 'steelblue';

  var updateData;

  function chart(selection){
    selection.each(function() {
      var dom = d3.select(this);
      var svg = dom.append('svg')
        .attr('height', height)
        .attr('width', width);
        var t = d3.transition().duration(750);

      updateData = function() {
        var barSpacing = height / data.length;
        var barHeight = barSpacing - barPadding;
        var maxValue = d3.max(data);
        var widthScale = width / maxValue;

        // join
        var bars = svg.selectAll('rect')
          .data(data);

        // exit
        bars.exit()
          .transition(t)
          .style('opacity', 0)
          .remove();

        // update
        bars.style('opacity', 1)
          .transition(t)
          .attr('y', function (d, i) { return i * barSpacing; })
          .attr('height', barHeight);

        // enter
        bars.enter()
          .append('rect')
          .attr('y', function(d, i) { return i * barSpacing; })
          .attr('height', barHeight)
          .attr('x', 0)
          .attr('width', 0)
          .style('fill', fillColor)
          .style('opacity', 0)
          .transition(t)
          .style('opacity', 1)
          .attr('width', function(d) { return d * widthScale; });
      }

      updateData();
    });
  }

  chart.data = function(_) {
    if (!arguments.length) return data;
    data = _;
    if (typeof updateData === 'function') updateData();
    return chart;
  }

  chart.width = function(_) {
    if (!arguments.length) return width;
    width = _;
    return chart;
  };

  chart.height = function(_) {
    if (!arguments.length) return height;
    height = _;
    return chart;
  };

  chart.barPadding = function(_) {
    if (!arguments.length) return barPadding;
    barPadding = _;
    return chart;
  }

  chart.fillColor = function(_) {
    if (!arguments.length) return fillColor;
    fillColor = _;
    return chart;
  }

  return chart;
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defaults__ = __webpack_require__(0);
/* harmony export (immutable) */ __webpack_exports__["a"] = histogram;


function histogram(){
  var updateData;
  var data = [];
  var margin = __WEBPACK_IMPORTED_MODULE_0__defaults__["a" /* ChartDefault */].margin;
  var width = __WEBPACK_IMPORTED_MODULE_0__defaults__["a" /* ChartDefault */].width;
  var height = __WEBPACK_IMPORTED_MODULE_0__defaults__["a" /* ChartDefault */].height;

  var x = d3.scaleLinear()
    .range([0, width]);

  var y = d3.scaleLinear()
    .range([height, 0]);

  var histogram = d3.histogram()
    .value(function(d) { return d; });

  function chart(selection){
    selection.each(function() {
      var t = d3.transition().duration(750);
      var dom = d3.select(this);

      var svg = dom.append('svg')
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      var xAxis = svg.append('g')
        .attr('class', 'axis axis--x')
        .attr('transform', 'translate(0,'+ height +')')
        .call(d3.axisBottom(x));

      updateData = function() {
        x.domain(d3.extent(data, function(d) { return d; }));

        var bins = histogram.domain(x.domain())
          .thresholds(x.ticks(10))
          (data);

        y.domain([0, d3.max(bins, function(d) { return d.length; })]);

        // join
        var g = svg.selectAll(".bar")
          .data(bins);

        // exit
        g.exit()
          .transition(t)
          .style('opacity', 0)
          .remove();

        // update
        g.style('opacity', 1)
          .transition(t)
          .attr('transform', function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })

        // enter
        var bar = g.enter()
          .append('g')
          .attr('class', 'bar')
          .attr('transform', function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; });

        bar.append('rect')
          .attr('x', 1)
          .attr('width', function(d) { return x(d.x1) - x(d.x0) - 1; })
          .attr('height', function(d) { return height - y(d.length); });

        bar.append('text')
          .attr("dy", ".75em")
          .attr("y", 6)
          .attr("x", function(d) { return (x(d.x1) - x(d.x0)) / 2; })
          .attr("text-anchor", "middle")
          .text(function(d) { return d.length; });

      }

      updateData();
    });
  }

  chart.data = function(_) {
    if (!arguments.length) return data;
    data = _;
    if (typeof updateData === 'function') updateData();
    return chart;
  }

  chart.margin = function(_) {
    if (!arguments.length) return margin;
    margin = _;
    return chart;
  };

  chart.width = function(_) {
    if (!arguments.length) return width;
    width = _;
    return chart;
  };

  chart.height = function(_) {
    if (!arguments.length) return height;
    height = _;
    return chart;
  };

  return chart;
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defaults__ = __webpack_require__(0);
/* harmony export (immutable) */ __webpack_exports__["a"] = hydrograph;


function hydrograph(){

  var margin = {top: 20, right: 30, bottom: 30, left: 20};
  var width = 1000;
  var height = 500;
  var data = [];
  var updateData;
  var yLower = undefined;
  var yUpper = undefined;
  var colorArr = d3.schemeCategory10;
  var showWatch = true;
  var showWarning = true;

  function chart(selection) {
    selection.each(function() {
      width = width - margin.left - margin.right;
      height = height - margin.top - margin.bottom;
      yLower = typeof yLower != 'undefined' ? yLower : d3.min(data.feeds, function(f) { return d3.min(f.values, function(d) { return d.y; }) });
      yUpper = typeof yUpper != 'undefined' ? yUpper : d3.max(data.feeds, function(f) { return d3.max(f.values, function(d) { return d.y; }) });

      var x = d3.scaleTime()
        .range([0, width])
        .domain([
          d3.min(data.feeds, function(f) { return d3.min(f.values, function(d) { return d.x; }) }),
          d3.max(data.feeds, function(f) { return d3.max(f.values, function(d) { return d.x; }) })
        ]);

      var y = d3.scaleLinear()
        .range([height, 0])
        .domain([
          yLower,
          yUpper
        ])
        .nice();

      var color = d3.scaleOrdinal(colorArr)
        .domain(data.feeds.map(function(f) { return f.id; }));

      var line = d3.line()
        .curve(d3.curveBasis)
        .x(function(d) { return x(d.x); })
        .y(function(d) { return y(d.y); });

      var dom = d3.select(this);
      var svg = dom.append('svg')
        .attr('height', height + margin.top + margin.bottom)
        .attr('width', width + margin.left + margin.right);

      var g = svg.append('g')
        .attr('transform', 'translate('+ margin.left +','+ margin.top +')');

      g.append('g')
        .attr('class', 'axis axis--x')
        .attr('transform', 'translate(0,'+ height +')')
        .call(d3.axisBottom(x));

      g.append('g')
        .attr('class', 'axis axis--y')
        .call(d3.axisLeft(y));

      var watch = g.selectAll('.watch')
        .data(data.watch)
        .enter()
        .append('rect')
        .attr('class', 'watch')
        .attr('y', function(d){ return y(data.warning); })
        .attr('x', 0)
        .attr('height', function(d) { return y(d) - y(data.warning); })
        .attr('width', width)
        .style('fill', '#FD0')
        .style('opacity', 0.1);

      var warn = g.selectAll('.warn')
        .data(data.warning)
        .enter()
        .append('rect')
        .attr('class', 'warn')
        .attr('y', 0)
        .attr('x', 0)
        .attr('height', function(d) {
          return y(d); })
        .attr('width', width)
        .style('fill', 'red')
        .style('opacity', 0.1);

      var feed = g.selectAll('.feed')
        .data(data.feeds)
        .enter()
        .append('g')
        .attr('class', 'feed');

      feed.append('path')
        .attr('class', 'line')
        .style('fill', 'none')
        .style('stroke-width', '2px')
        .attr('d', function(d) { return line(d.values); })
        .style('stroke', function(d) { return color(d.id); });

      // feed.append("text")
      //   .datum(function(d) { return {id: d.id, value: d.values[d.values.length - 1]}; })
      //   .attr("transform", function(d) { return "translate(" + x(d.value.x) + "," + y(d.value.y) + ")"; })
      //   .attr("x", 3)
      //   .attr("dy", "0.35em")
      //   .style("font", "10px sans-serif")
      //   .text(function(d) { return d.id; });

      updateData = function() {
        var t = d3.transition().duration(750);

        var updateFeed = g.selectAll('.feed')
          .data(data.feeds)

        var line = updateFeed.selectAll('.line');

        // updateFeed.enter()
        //   .append('g')
        //   .attr('class', 'feed')
        //   .append('path')
        //   .attr('class', 'line')
        //   .attr('d', '')
        //   .style('fill', 'none')
        //   .style('stroke-width', '1.5px')
        //   .style('opacity', 0)
        //   .transition(t)
        //   .delay(function(d, i) { return (data.length - i) * 40; })
        //   .attr('d', function(d) { return line(d.values); })
        //   .style('stroke', function(d) { return color(d.id); })
        //   .style('opacity', 1);
        //
        // update.exit()
        //   .transition(t)
        //   .style('opacity', 0)
        //   .remove();
      }

    });
  }

  chart.showWatch = function(_) {
    if (!arguments.length) return showWatch;
    if (typeof _ != 'boolean') return showWatch;
    showWatch = _;
    return chart;
  }

  chart.showWarning = function(_) {
    if (!arguments.length) return showWarning;
    if (typeof _ != 'boolean') return showWarning;
    showWatch = _;
    return chart;
  }

  chart.data = function(_) {
    if (!arguments.length) return data;
    data = _;
    if (typeof updateData === 'function') updateData();
    return chart;
  }

  chart.width = function(_) {
    if (!arguments.length) return width;
    width = _;
    return chart;
  };

  chart.height = function(_) {
    if (!arguments.length) return height;
    height = _;
    return chart;
  };

  chart.yLower = function(_) {
    if (!arguments.length) return yLower;
    // if ()
    yLower = _;
    return chart;
  }

  chart.yUpper = function(_) {
    if (!arguments.length) return yUpper;
    yUpper = _;
    return chart;
  }

  chart.colorArray = function(_) {
    if (!arguments.length) return colorArr;
    colorArr = _;
    return chart;
  }

  return chart;

}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_bar__ = __webpack_require__(1);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "bar", function() { return __WEBPACK_IMPORTED_MODULE_0__lib_bar__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_histogram__ = __webpack_require__(2);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "histogram", function() { return __WEBPACK_IMPORTED_MODULE_1__lib_histogram__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_hydrograph__ = __webpack_require__(3);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "hydrograph", function() { return __WEBPACK_IMPORTED_MODULE_2__lib_hydrograph__["a"]; });





/***/ })
/******/ ]);
});